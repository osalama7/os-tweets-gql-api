scalar Date
scalar JSON
scalar DateTime

schema {
  query: Query
  mutation: Mutation
}

type Query {
  tweets(input: paginate): TweetsFeed!
  gradientDescentJob(input: getGradientDescentJob): GradientDescentJob
}

type Mutation {
  updateSentiment(input: [updateSentimentInput!]!): [updateSentimetResult]
  createGradientDescentJob(
    input: createGradientDescentJobInput!
  ): GradientDescentJob
  getSentimentPrediction(input: GetSentimentInput): [NlpSentimentResult]
}

enum Role {
  USER
  ADMIN
}

input GetSentimentInput {
  tweets: [JSON!]!
}

input paginate {
  skip: Int
  take: Int
}

input getGradientDescentJob {
  version: String!
}

input updateSentimentInput {
  id: ID!
  sentiment: Float!
}

input createGradientDescentJobInput {
  theta: [Float]!
  cost: Float!
  frequencies: JSON!
  version: String!
  sources: [String]!
}

type Tweet {
  id: ID!
  id_str: Float
  name: String
  text: String!
  conts: [String]
  created_at: Date
  current_user_retweet_id: Float
  url_entities: [String]
  retweet_count: Float
  in_reply_to_user_id: Float
  in_reply_to_status_id: Float
  source: String
  sentiment: String
}

type GradientDescentJob {
  id: ID!
  theta: [Float]
  cost: Float
  sources: [String]
  createdAt: Date
  updatedAt: Date
  frequencies: JSON
}

type updateSentimetResult {
  id: ID!
  sentiment: String!
}

type PageInfo {
  start: ID!
  end: ID!
  count: Int!
}

type TweetsFeed implements IPaginatedResource {
  totalCount: Int!
  pageInfo: PageInfo!
  nodes: [Tweet!]!
  hasMore: Boolean!
  cursor: Int
}

interface IPaginatedResource {
  totalCount: Int!
  pageInfo: PageInfo!
}

type NlpSentimentResult {
  sentiment: String
  id: ID
}

interface PredictTweet {
  id: ID!
  text: String!
}
